@page "/examples/cnn/fruit-recognition"
@using DotML
@using DotML.Network
@using DotML.Network.Training
@using DotML.Network.Initialization
@using Qkmaxware.Media.Image

<NetworkExplorerV2 @ref=explorer TNetwork=ConvolutionalFeedforwardNetwork Network=network Trainer=trainer TrainingData=training ValidationData=testing Checkpoint=checkpointManager>
    <Input>
        <PaintApp OnChange=@((pixels) => { context.Value = vectorize(pixels); explorer?.RefreshState(); }) ImgWidth=IMG_WIDTH ImgHeight=IMG_HEIGHT></PaintApp>
    </Input>
    <Output>
        @{
            var prob = new ProbabilityDistribution(context.Output.Value, OUT_CLASS_NAMES);
            int selected = prob.SelectMostProbable(out string? name);
        }
        <h2 class="@name" style="text-align:center; margin-top: 24px;">@name (@prob.GetProbabilityOf(selected).ToString("F2"))</h2>
        <ClassificationTable Output=@context.Output.Value ClassNames=@OUT_CLASS_NAMES></ClassificationTable>
    </Output>
    <DataVisualization>

    </DataVisualization>
    <NetworkVisualization>
        <NetworkHtml Network=network></NetworkHtml>
    </NetworkVisualization>
    <ValidationVisualization>
        
    </ValidationVisualization>
</NetworkExplorerV2>

@code {
    private NetworkExplorerV2<ConvolutionalFeedforwardNetwork>? explorer;

    const int IMG_WIDTH = 227;
    const int IMG_HEIGHT = 227;
    const int IMG_CHANNELS = 3;
    const int OUT_CLASSES = 3;
    string[] OUT_CLASS_NAMES = new string[OUT_CLASSES] {
        "apple", "banana", "orange",
    };

    // AlexNet (https://medium.com/@siddheshb008/alexnet-architecture-explained-b6240c528bd5)
    /*
    Image       227x227x3
    Convolution 55x55x96   11x11 Kernel, Stride 4, ReLU
    Max Pooling 27x27x96   3x3 Kernel, Stride 2, ReLU
    Convolution 27x27x256  5x5 Kernel, Stride 1, ReLU
    Max Pooling 13x13x256  3x3 Kernel, Stride 2, ReLU,
    Convolution 13x13x384  3x3 Kernel, Stride 1, ReLU,
    Convolution 13x13x384  3x3 Kernel, Stride 1, ReLU
    Convolution 13x13x256  3x3 Kernel, Stride 1, ReLU
    Max Pooling 6x6x256    3x3 Kernel, Stride 2, ReLU
    FC          9216       ReLU
    FC          4096       ReLU
    FC          4096       ReLU
    Softmax     1000       Softmax
    */
    private ConvolutionalFeedforwardNetwork alexNet = new ConvolutionalFeedforwardNetwork(
        new ConvolutionLayer     (input_size: new Shape3D(IMG_CHANNELS, IMG_HEIGHT, IMG_WIDTH), padding: Padding.Valid, stride: 4, filters: ConvolutionFilter.Make(96, 3, 11)),
        new ActivationLayer      (input_size: new Shape3D(96, 55, 55), HyperbolicTangent.Instance),
        new LocalMaxPoolingLayer (input_size: new Shape3D(96, 55, 55), size: 3, stride: 2),
        new ConvolutionLayer     (input_size: new Shape3D(96, 27, 27), padding: Padding.Same, stride: 1, filters: ConvolutionFilter.Make(256, 96, 5)),
        new ActivationLayer      (input_size: new Shape3D(256, 27, 27), HyperbolicTangent.Instance),
        new LocalMaxPoolingLayer (input_size: new Shape3D(256, 27, 27), size: 3, stride: 2),
        new ConvolutionLayer     (input_size: new Shape3D(256, 13, 13), padding: Padding.Same, stride: 1, filters: ConvolutionFilter.Make(384, 256, 3)),
        new ActivationLayer      (input_size: new Shape3D(384, 13, 13), HyperbolicTangent.Instance),
        new ConvolutionLayer     (input_size: new Shape3D(384, 13, 13), padding: Padding.Same, stride: 1, filters: ConvolutionFilter.Make(384, 384, 3)),
        new ActivationLayer      (input_size: new Shape3D(384, 13, 13), HyperbolicTangent.Instance),
        new ConvolutionLayer     (input_size: new Shape3D(384, 13, 13), padding: Padding.Same, stride: 1, filters: ConvolutionFilter.Make(256, 384, 3)),
        new ActivationLayer      (input_size: new Shape3D(256, 13, 13), HyperbolicTangent.Instance),
        new LocalMaxPoolingLayer (input_size: new Shape3D(256, 13, 13), size: 3, stride: 2),
        new FullyConnectedLayer  (input_size: 9216, neurons: 4096),
        new ActivationLayer      (input_size: new Shape3D(1, 4096, 1), HyperbolicTangent.Instance),
        new FullyConnectedLayer  (input_size: 4096, neurons: 4096),
        new ActivationLayer      (input_size: new Shape3D(1, 4096, 1), HyperbolicTangent.Instance),
        new FullyConnectedLayer  (input_size: 4096, neurons: OUT_CLASSES),
        new SoftmaxLayer         (OUT_CLASSES)
    );

    /*private ConvolutionalFeedforwardNetwork network = new ConvolutionalFeedforwardNetwork(
        new ConvolutionLayer(input_size: new Shape3D(3, 227, 227), padding: Padding.Same, stride: 1, filters: ConvolutionFilter.Make(32, 3, 3)),
        new ActivationLayer(input_size: new Shape3D(32, 227, 227), activation: HyperbolicTangent.Instance),
        new LocalMaxPoolingLayer(input_size: new Shape3D(32, 227, 227), size: 2, stride: 2),
        
        new ConvolutionLayer(input_size: (32, 113, 113), padding: Padding.Same, stride: 1, filters: ConvolutionFilter.Make(64, 32, 3)),
        new ActivationLayer(input_size: new Shape3D(64, 113, 113), activation: HyperbolicTangent.Instance),
        new LocalMaxPoolingLayer(input_size: new Shape3D(64, 113, 113), size: 2, stride: 2),

        new ConvolutionLayer(input_size: (64, 56, 56), padding: Padding.Same, stride: 1, filters: ConvolutionFilter.Make(128, 64, 3)),
        new ActivationLayer(input_size: new Shape3D(128, 56, 56), activation: HyperbolicTangent.Instance),
        new LocalMaxPoolingLayer(input_size: new Shape3D(128, 56, 56), size: 2, stride: 2),

        new FullyConnectedLayer(input_size: new Shape3D(128, 28, 28).Count, neurons: 512),
        new ActivationLayer(input_size: new Shape3D(1, 512, 1), activation: HyperbolicTangent.Instance),

        new FullyConnectedLayer(input_size: new Shape3D(1, 512, 1).Count, neurons: 128),
        new ActivationLayer(input_size: new Shape3D(1, 128, 1), activation: HyperbolicTangent.Instance),

        new FullyConnectedLayer(input_size: new Shape3D(1, 128, 1).Count, neurons: OUT_CLASSES),
        new SoftmaxLayer(size: OUT_CLASSES)
    );*/

    private BatchedConvolutionalEnumerableBackpropagationTrainer<ConvolutionalFeedforwardNetwork> trainer = new BatchedConvolutionalEnumerableBackpropagationTrainer<ConvolutionalFeedforwardNetwork> {
        LearningRate = 0.001,
        LearningRateOptimizer = new AdamOptimizer(),
        LossFunction = LossFunctions.CrossEntropy,
        NetworkInitializer = new HeInitialization(),
        BatchSize = 6,
        EnableGradientClipping = true
    };

    private ICheckpointManager<ConvolutionalFeedforwardNetwork> checkpointManager = new CnnSingleCheckpointManager("_session_fruit_recognition");

    private bool loaded => training is null || testing is null;
    private static TrainingSet? training = null;
    private static TrainingSet? testing = null;
    private static SafetensorBuilder? weights;

    static FruitRecognition(){
        // Load the training vectors. 32x32 images with a single pixel per image 0->255 range. Rescale them between 0.0 and 1.0.
        training = ResourceLoader.LoadBinaryVectors(["data/Fruits/fruits.augmented.227x277.bin"], OUT_CLASSES, 0.0, 1.0, (reader) => vectorize(reader.ReadByte()));
        testing = training; 

        //weights = ResourceLoader.LoadSafetensors("data/Fruits/fruitrecognizer.tanh.safetensors");
    }

    private static double vectorize(byte b) => b / 255.0;
    private static Vec<double> vectorize(Pixel[] pixels) {
        var len = pixels.Length;
        double[] values = new double[len * 3];
        for (var i = 0; i < pixels.Length; i++) {
            var pixel = pixels[i];
            values[0     + i] = vectorize(pixel.R);
            values[len   + i] = vectorize(pixel.G);
            values[2*len + i] = vectorize(pixel.B);
        }
        return Vec<double>.Wrap(values);
    }
}